Lambda expressions

It's derived from lambda caculus. 
It was a big change in calculus world , which gave tremedous ease in maths

Now the same concept is being used in programming languages.
1st language to use lambda 
LISP
c , c++ , c# , scala , javascript , python

Finally in java also(Java SE 8 onwards)

Background

Java is an object-oriented language. With the exception of primitive data types, everything in Java is an object. Even an array is an Object. Every class creates instances that are objects. There is no way of defining just a function / method which stays in Java all by itself. There is no way of passing a method as argument or returning a method body for that instance.
i.e passing the behaviour was not possible till java 8.

It was slightly possible using anonymous inner classes --but that still required us to write a class !


What is lambda expression ?

Concise anonymous function which can be passed around 
It has
1. list of params
2. body 
3. return type.(optional)

Lambda expressions in Java is usually written using syntax (argument) -> (body). For example:

(type1 arg1, type2 arg2...) -> { body }

 
Following are some examples of Lambda expressions.

1.(int a, int b) -> {  return a + b; }
OR can be reduced to 
(int a, int b) ->  a + b
OR further can be reduced to
(a,b) -> a+b
 
2. () -> System.out.println("Hello World")
 
3. s ->  System.out.println(s)
 
4. () -> 42
 
5. () ->  3.1415

Above is just a syntax of lambda . But how to use them ?
Answer is ---You can use lambda expressions as targets of  functional i/f reference.



----------------------
Why lambdas --
Easy way of passing a behaviour.
Till Java SE 7 , there was no way of passing a method as argument or returning a method body for that instance.
To enable this style of functional programming , lambdas are introduced.
How to pass a behaviour ?



------------------
What is a functional programming  paradigm ?
A language where below features are supported.

Functions are treated as a first class citizens.
Meaning :  You can 
1.1  define anonymous functions
1.2  assign a function to a variable (function literal)
1.3  pass function as a parameter
1.4  return function as a return value

Why FP ?

1. To write more readable , maintainable , clean & concise code.
2. To use APIs easily n effectively.
3. To enable parallel processing 

OOP uses imperative style of programming (where you will have to specify what's to be done & how --both) .
FP uses declarative style of programming (where you will just have to specify what's to be done 

eg : Objective 
Find out the average salary of emp from the specified dept.

How will you do it in imperative manner? 
eg : List<Emp> l1=new AL<>();
l1.add(..);........
String dept=sc.next();
double total=0;
int num=0;
for(Emp e : l1)
  if(e.getDept().equals(dept)) {
   total += e.getSal();
   num++;
  }
sop(total/num);


OR

Vs
How to do it in declarative style ?
eg : List<Emp> l1=new AL<>();
l1.add(..);........

l1.stream().filter(e->e.getDept().equals(dept)).mapToDouble(Emp::getSal).average().getAsDouble()

---------------------------

Objective -- 
1. Perform ANY operation on 2 double values & return the result
eg --add/multiply/subtract/divide....

2. Convert from ANY src type to ANY dest type
eg : String ---> length
String ----> upper case string
celcius ---> fahrenheit (f=c*1.8+32)
Student ---> GPA
number ---> square root

How do we declare just behaviour in java ?

Refer to Summable interface , implementation & its conversion to lambda.

Using interfaces

1. Create generic  interface Converter<F,T> to specify single abstract method --convert , from F ---> T

2. Create a Tester class (with main method)
Add a static method to test the converter.

I/P -- 1. conversion source type(From)
2. conversion behaviour

O/P -- conversion result.(To)

public static <F,T> testConverter(F from, Converter<F,T> c) 
{
   return c.convert(from);
}

3. main(..)  invokes this static method for testing Converter.
But what will be 2nd argument ?



Applying lambdas to refer to func i/f.
Objectives 
1. Collections.sort
2. List -- forEach , removeIf


Main Differences between Lambda Expression and Anonymous class

1. One key difference between using Anonymous class and Lambda expression is the use of "this" keyword. 

For anonymous class ‘this’ keyword resolves to anonymous class, whereas for lambda expression ‘this’ keyword resolves to enclosing class where lambda is written.

2. Another difference between lambda expression and anonymous class is in the way these two are compiled. 
Java compiler compiles lambda expressions and convert them into private method of the class. 






