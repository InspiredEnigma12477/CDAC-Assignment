What is enum in java ? : Keyword in java

Enumerations (in general) are generally a set of related constants. 

They have been in other programming languages like C++ from beginning. BUT more powerful in Java.

Supported in Java since  JDK 1.5 release.

Enumeration in java is supported by keyword enum. enums are a special type of class that always extends java.lang.Enum.

It's a combination of class & interface features.

Why ?

1. Helps to define constants.
2. Adds type safety to constants.

eg interface MovieConstants
{

int AGE_MINOR=16;
int AGE_MIN = 10;
int AGE_MAX=70;

int TKT_COST_SILVER =100;
int TKT_COST_GOLD =200;
int TKT_COST_PLATINUM =300;

}

If by programer's mistake application uses  TKT_COST to compare ages of user , what will happen ?

Both being int type neither javac or jvm can realise err , but you will get wrong results.
It should not be allowed --as they represent different types ---AGE type & TKT_COST type. 

3.  You can't  iterate over all constant values from i/f but with enums you can.
4 . Consider this

eg interface Menu
{   
   String SOUP="Tomato soup";
   String DOSA="Mysore Dosa";
   String RICE="Fried rice";
}
Can you assign any price along with menu?  ---Not easily !
But with enums you can.

----------------------------

A simple usage will look like this:

public/default enum Direction {
   EAST,
   WEST,
   NORTH,
   SOUTH       //optionally can end with ";"
 }
Here EAST, WEST, NORTH and SOUTH are implicitely of type
public final static Direction EAST=new Direction("EAST",0) ---super("EAST",0); 
public final static Direction WEST=new Direction("WEST",1) ---super("WEST",1); 

Super class of all enums

public abstract class Enum<E extends Enum<E>>
extends Object
implements Comparable<E>, Serializable

ie. they are comparable and serializable implicitly. 
All enum types in java are singleton by default. 
So, you can compare enum types using ‘==’ operator also.

Since enums extends java.lang.Enum, so they can not extend any other class because java does not support multiple inheritance . But, enums can implement any number of interfaces.

enum can be declared within a class or separately.

eg of enum within a class

When declared inside a class, enums are always static by default 
eg public class TestOuter
 {
   enum Direction
   {
     EAST,
     WEST,
     NORTH,
     SOUTH
   }
 }
To  access a direction  -- use TestOuter.Direction.NORTH.

Constructors of enum

By default, you don't have to supply constructor definition.
Javac  implicitely calls super class constructor , Enum(String name,int ordinal)

Important Methods of Enum (implicitly added by javac)

1. public static Enum[] values() --rets array of enum type of refs.--pointing to singleton objs
2. public static Enum valueOf(String name) throws IllegalArgumentException -- string to enum type converter
values & valueOf methods generated by compiler --so not part of javadocs.
If you pass a different name (eg -- ABC) to valueOf ---throws IllegalArgumentException

Inherited from Suerpclass Enum

String name() --rets name of constant in string form
int ordinal() --rets index of the const as it appears in enum.--starts with 0
public String toString() : overridden to return name of the enum constant.

You can supply  your own constructor/s to initialize the state(data member of enum types.

enum Direction {
  // Enum types
  EAST(0), WEST(180), NORTH(90), SOUTH(270);
 
  // Constructor
  private Direction(final int angle) {
    this.angle = angle;
  }
 
  // Internal state
  private int angle;
 
  public int getAngle() {
    return angle;
  }
}

BUT u can't instantiate enums using these constructors , since they are implicitely private.

You can override toString BUT you can't override equals since it's declared as final method in enum.
