Optional Practice assignments

1. Create Java application for fixed stack & growable stack based on Stack i/f , for storing customer details

Customer has : id(int), name (string) , address(string)
Provide suitable constructor n toString


Steps
1.1  Create Customer class
1.2 Stack interface -- push & pop functionality for Customer refs. & declare STACK_SIZE as a constant. 
1.3 Create implementation class of Stack i/f -- FixedStack (array based)
1.4 Create another implementation class of Stack i/f-- GrowableStack (array based)
Can you add inheritance between Fixed Stack n Growable Stack ?

1.5
Create Tester class (Hint :  use dynamic method dispatch using interfaces)
Display Menu

Note : Must use 1 switch-case only. You won't need any complex nested control structure

Once user selects either fixed or growable stack , user shouldn't be allowed to change the selection of the stack.

1 -- Choose Fixed Stack

2 -- Choose Growable Stack
Accept following options only after initial selection

3 -- Push data 
I/P : Accept customer details & store these details in the earlier chosen stack or give error mesg : NO stack chosen !!!
In case user has chosen fixed stack , n stack is full give err mesg. 
In case of growable stack , should be able to save customer details w/o getting err.

4 --- Pop data & display the same (from the earlier chosen stack or give error mesg : NO stack chosen !!!)
No inputs are required : pop customer details from the top of the stack

5 -- Exit


--------------------------------------

2.  Mini Project , to apply the learnt concepts.

Create Java application for customer management system.

3.1 Customer : id(int) name(string),email(string),password(string),registrationAmount(double),dob(Date),plan(ServicePlan : enum)

ServicePlan : SILVER,GOLD,DIAMOND,PLATINUM

Depending on the plan chosen customer can avail different types of services


customer id should be system generated , using auto increment.

Unique ID(Primary Key ) : email  (2 customers are SAME iff their email ids are same)


3.2 

Validation Rules 
email must contain "@" & should be from ".com" or ".org"  domain
reg ex : "^[\\w-\\.]+@([\\w-]+\\.)+(com|org)$";

password must be min 5 max 10 chars long. Must be alphanumeric n Must contain atleast 1 special character : # @ $ % * 
reg ex : "(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[#@$*%]).{5,10}";

dob should be before 1st Jan 1995
duplicate customer details should not be stored.
 

Centralized exception handling is expected.

3.4 Use suitable data structure for storing customer details.


Options
1. Customer registration
Accept n Validate customer details.
Iff it's valid , store it  , o.w display error message via custom exception

2. Display details of all registered customers
(for-each)

3 Customer login
i/p : email ,password
o/p success mesg or error mesg via exc handling

4. Change Password 
i/p : email ,old password ,new password
o/p success mesg or error mesg via exc handling


5. Un subscribe customer
i/p : customer id 
In case of valid id , just nullify customer ref in the array (shifting up of the references is not expected)  . o.w if customer is not found by that id , give suitable error message.
Hint : index=custId-1; 
custList.remove(index);

6. Display names of the customers born between 2 specified dates.
i/p : begin date n end date.
eg : for (Customer c : custList)
       if(c.getDob().isAfter(beginDate) && c.getDob().before(endDate))
         sop(c.getName());

7. Display all the customer details ,who have chosen specific plan
i/p plan name


10. Exit


3. 3. Solve 
Create a new eclipse project  for basic library management system

1. Store book details in a library in suitable data structure to ensure no dups n constant time performance for CRUD operations.

Book details : title(string),category(enum),price(double),publishDate(LocalDate) ,authorName(string),quantity(int)
Unique ID : book title
Accept at least 5 book details from user & confirm if D.S is working in a correct manner.

We are not adding any extra validations rules here , to keep the focus on collection frmwork

Create a populated D.S (data structure) with sample data : atleast 5 entries

Supply following options

BUT none of the options should be available before login
2 roles : admin n reader
Credentials For admin user : admin,admin1234
Credentials For ordinary reader : reader,reader1234

3.0 : User login
i/p : user name n pwd

Can throw AuthenticationException 

3.1 Add a book. (allowed under admin role)
I/P Book title
In case of a new book , store book details in the map.
In case of duplicate title , just update the quantity

3.2 Display All books in a library ((allowed under any role)


3.3 Issue out a single copy of the book. (allowed under reader role)
i/p book title
If the book is found , update the quantity suitably.
Otherwise , raise suitable exception  : mesg : invalid book title

3.4 Return a book (allowed under reader role)
i/p book title
If the book is found , update the quantity suitably.
Otherwise , raise suitable exception

3.5 Remove book  (allowed under admin role)
i/p book title
If the book is found , remove book's entry(key n value pair) from the library. 
Otherwise , raise suitable exception

3.6 Display book details of a specified author (allowed under reader role)
i/p : author

3.7 Display book details all books published after a specific date n from a specific category. (allowed under reader role)
i/p date n category
-----------------------------

4.
Write a java application to read a text file which contains bank account statement of a customer of a month.
 
First row of file contains field names, remaining rows contains transaction data.
Values of each row are separated by comma.

Display following details on the console: 
Sum of all deposits
Max withdraw amount
Shopping expenses (sum of withdrawals for shopping)
Date on which maximum amount withdrawn

Name of the file: Jan2022.txt
Content of the file: 
TransactionDate,Narration,WithdrawalAmount,DepositAmount
01-01-2022,Salary Credit,0.0,50000.0
01-01-2022,Mobile Recharge,300.0,0.0
02-01-2022,DTH Recharge,1000.0,0.0
02-01-2022,Rent Transfer,11000.0,0
02-01-2022,Cashback Paytm,0.0,1000.0
05-01-2022,Shopping,5000.0,0.0
10-01-2022,Shopping,7000.0,0.0
15-01-2022,Cashback,0.0,3000.0
25-01-2022,Mobile Purchase,10000.0,0.0
31-01-2022,Dining,1200.0,0.0

Expected output on console:
Sum of all deposits = 54000.0
Max deposit amount= 50000.0
Shopping expenses = 12000.0
Date on which max amount withdrawn= 02-01-2022
