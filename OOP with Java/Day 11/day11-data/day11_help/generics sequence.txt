1. Generic Method 
What is it ? A Method which has it's own type parameter.
Can it exist in a non generic class? : Yes

1.1 Generic method example : Arrays.toList
java.util.Arrays class
public static <T> List<T> asList(T... a)
Generic method from a non generic class(Arrays)
i/p : T... a : This method can accept : no args or T[] or T t1,T t2....
o/p : FIXED size list
How will you use it for getting a fixed size List<Integer> ?

1.2 toArray : generic method of Collection


2. More about generic syntax : ? , extends ,super
Given :
Emp <---- Mgr <----SalesMgr
Emp <---- Worker <---- TempWorker

computeSalary() method exists in Emp class n has been overridden in all sub classes


What will happen ?
Emp e =new Mgr();//up casting
e.computeSalary();//mgr's computeSal : run time poly(Dyn method dispatch)
e=new TempWorker();
e.computeSalary();



ArrayList<Emp> l1=new ArrayList<>();//what's the inferred type of the RHS ? : Emp
ArrayList<Mgr> l2=new ArrayList<>();//what's the inferred type of the RHS ? : Mgr
l1=l2; //javac err
Object o=new Mgr();//no err
ArrayList<Object> l3=new ArrayList<>();//what's the inferred type of the RHS ? : Object
l3=l2;//javac err
l3=l1;//javac err

What does it imply ?
Does inheritance in generics work in the same manner as learnt earlier ? NO

Wild card in generics comes to the rescue!
Enter "?"
What is it ? 
It's a wild card in generic syntax. Can be replaced by ANY type.
Represents any unknown type.

Now what will happen ?
ArrayList<?> l1=new ArrayList<>();//what's the implicit type of the RHS ? : 
ArrayList<Mgr> l2=new ArrayList<>();
l1=l2;

? : is referred to as un bounded wild card.


Hands on
1. Shuffle all the elements of the list randomly.
Collections class Method
public static void shuffle​(List<?> list)

2. Collections class
reverse method

3. Write a static method in GenericUtils class : to print elements of ANY List(AL/LL/Vector) of ANY type

1. Add a method printElements to print the elements of ANY List of ANY type.
1.1 Try it with T : parameter Type (lab work!)
1.2 Try it with ?
Any difference ? 
Which seems easier to use ? 
Test it with tester : AL<Integer> , LinkedList<String>

2. Add "computeSalary" method in Emp based hierarchy
Modify GenericUtils class .
Add static method which can accept ANY List(AL/LL/Vector) of any type of emps(Emp /Mgr / SalesMgr / Worker/ TempWorker)
& compute salary.
Test it from Tester class .
2.1 Try it with T : parameter Type
2.2 Try it with ?
Any difference ?
Which seems easier to use ?


3. Write a method to Find max number from List of any numbers (integer / float / double ...) n return it to the caller.
 (Lab exercise)

3.5 Write a method to Find max element from numbers / strings/ dates
Lab Exercise


4. Can you write a method in GenericUtils class , to copy references from any type of the list to any other type of the list  ? 
If no , explain the reason.
How to modify above copy method with suitable restrictions ?
It should pass following tests
4.1 You should be able to copy references from AL<Worker> to ANY List<Emp>
4.2 You should be able to copy references from Vector<Mgr> to ANY List<Emp>
4.3 You should be able to copy references from LinkedList<SalesMgr> to ANY List<Emp>
4.4 Refer to earlier Fruits hierarchy (from Q 2)
You should be able to copy references from LinkedList<WaterMelon> to ANY List<Melon>
You should be able to copy references from ArrayList<WaterMelon> to ANY List<Fruit>

Note : You are not allowed to use a readymade Collections methods


eg of bounded type in Collection Framework
ArrayList<E> : generic class
public ArrayList​(Collection<? extends E> c)
E : Emp 
? extends Emp
Meaning : This ctor will create a non-empty AL of Emp type , from AL/LL/Vector/HS/LHS/TS (any Collection imple class) , from any type : Emp or it's sub type
Q : Will you be able populate AL<Mgr> from 
1. AL<Emp>
2. HS<Worker>
3. LL<SalesMgr>
4. Vector<Fruit>
5. TS<Object>
6. LHS<HRMgr>
Ans : 




Generic syntax :
? : wild card in generic syntax (it can be replaced by ANY type) : un bounded wild card
extends : Represents upper bound
super : Represents lower bound
? extends E : ANY type E or its sub type 
? super E : E or its super type
eg : ? extends Emp => Emp or it's sub type(Mgr,Worker.....)
? super Mgr => Mgr or it's super type (Emp , Object)


What will happen ? (javac error or no error?)
1. Vector<Mgr> mgrs=new Vector<>();
mgs.add(m1)....m10
ArrayList<Emp> emps=new AL<>(mgrs);

2. HashSet<HRMgr> hrMgrs=new HS<>();
hrMgrs.add(hrm1)....hrm10
ArrayList<Emp> emps=new AL<>(hrMgrs);
3.
ArrayList<Mgr> mgrs=new AL<>();
mgrs.add(m1).....m10
LinkedList<HRMgr> hrMgrs=new LinkedList<>(mgrs);

Ans this !
ArrayList<Mgr> mgrs=new AL<>();
mgrs.add(m1).....m10
ArrayList<? extends Emp> emp=new AL<>(mgrs);
ArrayList<? extends Object> objs=mgrs;



3.Collections class(Non generic class) :  Can contain a generic Method
eg : super keyword in generics : lower bound
Method of Collections class
public static <T> void sort(List<T> list,Comparator<? super T> c)
generic method : 
where does type declaration fit ? : It's placed between method modifiers n ret type
1st arg : List<T> list : You can pass List of ANY type (eg : AL/LL/Vector : ??
HS/LHS/TS : ??
HM/LHM/TM : ??) : 
Can you pass List of the following types :  
T --Customer , Student(extends Person) , BankAccount,Flight, Movie,Person , DacStudent (extends Student)
if above classes have not imple Comparable or Comparator : 

2nd arg : Comparator<? super T> c
Instance of the class which imple Comparator
eg : Collections.sort(studentList,comp);//comp : imple Comparator<Student> 
 Collections.sort(studentList,comp);//comp : imple Comaprator<Fruit> 
Collections.sort(studentList,comp);//comp : imple Comaprator<Person> 
Collections.sort(studentList,comp);//comp : imple Comaprator<Object> 
Collections.sort(studentList,comp);//comp : imple Comaprator<eDacStudent> 

------------------
More Details

? : wild card (represents ANY unknown type) => un bounded wildcard

extends => upper bound (type of the upper bound super class / interface)
If your collection(list/set/map) is acting as a producer (of data) i.e while using retrieve operation, use upper bound
eg : ? extends Number => Number or it's subtype (Byte,Short.....Double)
get : type of the data that you get  Number or it's subtype, BUT you can't add Integer , if it's collection of Double
Can be accessed using Number type of the ref.
(Producer extends)

super : lower bound
? super T => T or it's super type
Use it whenever your collection is acting as a consumer (data sink) : i.e wheneve you want to add data , to a collection.
(Consumer super)
