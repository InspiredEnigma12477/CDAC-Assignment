Today's Topics
Revise showroom management system
Solve pending work
Revise n look at more Features of enum
Wrapper classes
Association
Nested classes Overview
co variance
Generics
-----------------------
Revise enum
eg :
public enum Color
{RED,GREEN,BLUE}

What is it ? : keyword to represent set of related self typed constants.
It's a special class generated by javac that implicitly extends from ---java.lang.Enum

Access specifier of the Implicitly added  constructor : private
which are the args of the ctor : 2 , string name , int ordinal pos
1st n only statement in the ctor : super(nm,pos)

Data Members : 3 fields
public static final Color RED,GREEN,BLUE;


Important Methods : 
Inherited from Enum : public String name()
public int ordinal()
public String toString() : rets name of the enum constant
....
+ javac synthesized methods
1. public static Color[] values()
2. public static Color valueOf(String clr) throws IllegalArgumentException 

Is there any generated static init block : 
eg : 
static 
{
  //javac added code here ...
RED=new Color("RED",0);
....
}

Which methods can be overridden ? : toString
inherited version : rets name()

Which methods can not be overridden? : name(), ordinal(),equals(), compareTo() 
since they are final.

Which i/fs it implements  ? Serializable , Comparable
eg :
public enum Color
{RED,GREEN,BLUE}
In a Tester class : 
import static com.app.core.Color.*;
sop(RED.compareTo(BLUE));//what will be the answer ? -1

Can you add enum nested within a class or interface ? YES (implicitly it's treated as static member)
eg : class Vehicle
{
  ....
 private Color clr;
    enum Color
  {RED,GREEN,BLUE}
}

How to access BLUE ? Vehicle.Color.BLUE

Can you add , additional state , constructor , methods to the enum ? : ?? yes

eg : Suppose vehicle's price increases as per the chosen color

How will you implement it ?
enum Color
  {RED(5000),GREEN(8000),BLUE(4500)}


Try it out. 
Observe errors n fix them
Use it in the tester n show actual cost of the vehicle to the end user

Solve pending work(Refer to assignments)


4.  Wrappers
refer to readme n inheritance hierarchy

5. Establish HAS-A relation between 
Vehicle & DeliveryAddress
(one to one association)

Steps
1. Create a separate class : DeliveryAddress -- city,state,country,zipCode
constr , toString

2. To establish association(containment) between Vehicle & DeliveryAddress 
Add new state (instance var) : DeliveryAddress  
Don't init it in the constr.(since delivery address should be assigned only  when customer purchases a vehicle)

3. Add a method to link delivery address to a vehicle.

4. Write a simple tester to test this form of association.
Confirm :In this case ,  can a DeliveryAddress exist w/o a Vehicle ?
If yes : how will you prevent it ?


Enter Nested classes
Refer to nested classes overview diagram n nested_classes_rules.txt
(Currently refer to inner class only)


5. Add Option in Tester
Purchase Vehicle
i/p : vehicle's chasis no 
In case of valid chasis no , if the vehicle is not already sold , accept delivery address details & assign it to the vehicle.
o/p : in case of invalid chasis no or vehicle already sold --throw custom exc
o.w : assign delivery address &  give success message.


-----------------------Pending -------------------------------------

6. Co variance


7. Generics




