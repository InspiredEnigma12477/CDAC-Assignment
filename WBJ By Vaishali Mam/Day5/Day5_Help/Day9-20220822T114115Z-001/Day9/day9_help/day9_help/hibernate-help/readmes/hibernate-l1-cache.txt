Hibernate Caching

Caching is a facility provided by ORM frameworks which help users to get fast running web application, while help framework itself to reduce number of queries made to database in a single transaction. 

Hibernate achieves this by implementing first level cache.

First level cache in hibernate is enabled by default and you do not need to do anything to get this functionality working. In fact, you can not disable it even forcefully.(typically)

Its associated with Session object.
Session object is created on demand from session factory and it is lost, once the session is closed.

Similarly, first level cache associated with session object is available only till session object is live. It is available to session object only and is not accessible to any other session object in any other part of application.

NOTE 

1.    First level cache is associated with session object and other session objects in application can not see it.
2.    The scope of cache objects is of session. Once session is closed, cached objects are gone forever.
3.    First level cache is enabled by default and you can not disable it.
4.    When we query an entity first time, it is retrieved from database and stored in first level cache associated with hibernate session.
5.    If we query same object again with same session object, it will be loaded from cache and no sql query will be executed.(completely true only for get or load)
6.    The loaded entity can be removed from session using evict(Object ref) method. The next loading of this entity will again make a database call if it has been removed using evict() method.
7.    The whole session cache can be removed using clear() method. It will remove all the entities stored in cache.
