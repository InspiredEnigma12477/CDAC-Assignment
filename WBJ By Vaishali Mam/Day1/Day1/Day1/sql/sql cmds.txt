#to check DB status
status
#to show all databases
show databases;
# to create database
create database test;
#to use db
use test
# to show all tables
show tables
# to list all procedures
show procedure status


# to list all functions
show function status

#to view a stored procedure
show create procedure update_account;

show create function update_account_fn;
#JDBC details

Driver class for MySql 5/6 - com.mysql.jdbc.Driver
URL - jdbc:mysql://localhost:3306/test

Driver class for MySql 8 - com.mysql.cj.jdbc.Driver
URL - jdbc:mysql://localhost:3306/test



User name - root
Password - root

#DDL

create table my_emp (
empid int primary key auto_increment,
name varchar(20),
addr varchar(20),
salary double,
deptid varchar(10),join_date date);
insert into my_emp  values(default,'rama','pune',15000,'rnd','2018-11-18');
insert into my_emp  values(default,'shekhar','mumbai',18000,'rnd','2010-1-18');
insert into my_emp  values(default,'kiran','pune',13000,'prod','2016-7-8');
insert into my_emp  values(default,'riya','delhi',25000,'rnd','2019-3-18');
insert into my_emp  values(default,'meeta','chennai',21000,'prod','2020-11-18');

create table items
(id int(3) primary key auto_increment,dscr varchar(30),price double(6,1));
insert into items  values(default,'Core Java Books',500);
insert into items  values(default,'Java EE Books',600);
insert into items values(default,'XML Books',400);
insert into items values(default,'.NET Books',700);
insert into items values(default,'Cloud Computing',300);

create table stock_users (id int(3) primary key,pin int(6),name varchar(20),bal double(6,1));
insert into stock_users values(101,1234,'aa',1000);
insert into stock_users values(102,1235,'ab',2000);
insert into stock_users values(103,1236,'ac',3000);

create table stock_info(id int(3) primary key,name varchar(20),dscr varchar(30),price double(6,1),quantity int(5));
insert into stock_info values (1,'tata','low-risk,medium-gain',100,150);
insert into stock_info values (2,'tcs','medium-risk,medium-gain',150,250);
insert into stock_info values(3,'reliance','high-risk,high-gain',200,300);


create table bank_users(id int(3) primary key auto_increment,name varchar(20) unique,password varchar(20));
insert into bank_users values(1,'a','b');
insert into bank_users values(2,'c','d');
insert into bank_users values(3,'e','f');


create table bank_accounts(ac_no int(3) primary key auto_increment ,id int(3) ,type varchar(10),bal double,CONSTRAINT fk_users
    	  FOREIGN KEY (id)
    	  REFERENCES bank_users(id));
insert into bank_accounts values(101,1,'NRO',1000);
insert into bank_accounts values(102,1,'NRE',2000);
insert into bank_accounts values(103,2,'SAV',3000);

#Below  will not work as integrity constraint parent key not found.
# insert into bank_accounts values(104,20,'SAV',3000);



//to select all account's info for given user id
select a.ac_no,a.type,a.bal from bank_users u,bank_accounts a where
u.id=1 and u.id=a.id;


CREATE TABLE person (
  id INTEGER UNSIGNED NOT NULL AUTO_INCREMENT primary key,
  firstName VARCHAR(45) NOT NULL,
  lastName VARCHAR(45) NOT NULL);


create table accounts(id int auto_increment primary key ,name varchar(20),type varchar(10),bal double);
insert into accounts (name,type,bal) values ('aa','sav',1500);
insert into accounts (name,type,bal) values ('bb','sav',2500);

#stored procedure

 drop procedure transfer_funds;

DELIMITER $$
create   procedure transfer_funds(
 in sid int ,
 in did int,
 in amt double ,
 out sbal double,
 out dbal double 
) 
begin
update accounts set bal=bal-amt where id=sid;
update accounts set bal=bal+amt where id=did;
select bal into sbal from accounts where id=sid;
select bal into dbal from accounts where id=did;
end$$
 DELIMITER ;

DROP FUNCTION IF EXISTS F_TEST
DELIMITER $$
CREATE FUNCTION F_TEST(PID INT) RETURNS VARCHAR
BEGIN

  DECLARE NAME_FOUND VARCHAR DEFAULT "";

    SELECT EMPLOYEE_NAME INTO NAME_FOUND FROM TABLE_NAME WHERE ID = PID;
  RETURN NAME_FOUND;
END$$

DELIMITER ;
#stored function
DELIMITER $$
CREATE FUNCTION CustomerLevel(p_creditLimit double) RETURNS VARCHAR(10)
    DETERMINISTIC
BEGIN
    DECLARE lvl varchar(10);
 
    IF p_creditLimit > 50000 THEN
 SET lvl = 'PLATINUM';
    ELSEIF (p_creditLimit <= 50000 AND p_creditLimit >= 10000) THEN
        SET lvl = 'GOLD';
    ELSEIF p_creditLimit < 10000 THEN
        SET lvl = 'SILVER';
    END IF;
 
 RETURN (lvl);
END
DELIMITER ;




DELIMITER $$
create function update_account_fn (sid  int ,did  int,amt double)  returns double
DETERMINISTIC
begin
DECLARE dbal double;
update accounts set bal=bal-amt where id=sid;
update accounts set bal=bal+amt where id=did;
select bal into dbal from accounts where id=did;
return dbal;
end$$
DELIMITER ;
// id | name  | email  | password | reg_amt | reg_date   |  | role


#billing table

create table billing(mob_no varchar(20) primary key,name varchar(10),plan varchar(10),call_duration int(11) , total_bill double(6,1));
insert into billing values('12345','aa','plan-A',100,50);
insert into billing values('12344','bb','plan-B',150,70);
insert into billing values('12346','cc','plan-A',80,40);
insert into billing values('12347','dd','plan-C',180,240);

#Customer orders table
Create "orders" with 4 columns(order_id(PK), customer_id(FK),order_date,order_amount).
customer_id : FK references customer_id
create table customer_orders(order_id int,cust_id int,order_date date,amount double(8,1));


delete from my_emp where empid > 6;



1. mysql -u root
mysql> UPDATE mysql.user SET Password = PASSWORD('root')  WHERE User = 'root';
mysql> FLUSH PRIVILEGES;



shell> mysql -u root
mysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('root');
mysql> SET PASSWORD FOR 'root'@'127.0.0.1' = PASSWORD('newpwd');
mysql> SET PASSWORD FOR 'root'@'%' = PASSWORD('newpwd');

CREATE USER 'root'@'localhost' IDENTIFIED BY 'root';

#To alter column name/type 
ALTER TABLE contacts CHANGE COLUMN contact_type ctype varchar(20) NOT NULL;
 
# A trigger before insert for checking book price >= 0
drop trigger chk_stats;
 delimiter $$
    create trigger chk_stats before insert on test.book 
      for each row 
       begin  
      if  NEW.price < 100 then
       SIGNAL SQLSTATE '45000'   
       SET MESSAGE_TEXT = 'Book Price must be >= 100';
       end if; 
    end; 
    $$
delimiter ;
insert into book values('abc','a1',20);

# A trigger before update for checking book price >= 0
drop trigger chk_stats;
 delimiter $$
    create trigger chk_stats before update on test.book 
      for each row 
       begin  
      if  new.price < 100 then
       SIGNAL SQLSTATE '45000'   
       SET MESSAGE_TEXT = 'Book Price must be >= 100';
       end if; 
    end; 
    $$
delimiter ;
update book set price=10 where isbn='1';
----------------------
create table dmc_users (
id int(5) primary key auto_increment,
email varchar(20) unique,
password varchar(20),
reg_amt double(6,1),
reg_date date);

insert into dmc_users values(1,'rama@gmail','ram#123',5000,'2017-1-1');
insert into dmc_users values(2,'meera@gmail','mer#123',600,'2017-9-21');
----------------------


create table vendors(id int(5) primary key auto_increment,name varchar(20), email varchar(20) unique, password varchar(20),city varchar(20), cell_no varchar(10) unique , reg_amount double(8,1),reg_date date,role varchar(10));

insert into vendors values(default,'rama','rama@gmail.com','1234','pune','8522334456',2500,'2019-1-1','admin');

insert into vendors values(default,'sameer','sam@gmail.com','2234','mumbai','8922334456',500,'2018-11-21','vendor');

insert into vendors values(default,'riya','riya@gmail.com','3234','delhi','9862233445',1500,'2017-3-4','vendor');


----------------------------------
create table students (id int(5) primary key auto_increment,name varchar(30));
insert into students values(default,'abc');
insert into students values(default,'abc2');

create table hobbies (id int(5) primary key auto_increment,hobby_name varchar(30));

insert into hobbies values(default,'music');
insert into hobbies values(default,'cricket');
insert into hobbies values(default,'football');


create table student_hobbies (s_id int(5) primary key,h_id int(5) primary key,CONSTRAINT fk_studs FOREIGN KEY (s_id)
    	  REFERENCES students(id),CONSTRAINT fk_hobbies FOREIGN KEY (h_id)
    	  REFERENCES hobbies(id));

insert into student_hobbies values(1,2);
insert into student_hobbies values(1,3);
insert into student_hobbies values(2,1);
insert into student_hobbies values(2,2);
insert into student_hobbies values(2,3);




