C++ OOP Concepts:
The major purpose of C++ programming is to introduce the concept of object orientation to the C programming language.
Object Oriented Programming is a paradigm that provides many concepts such as inheritance, data binding, polymorphism etc.
The programming paradigm where everything is represented as an object is known as truly object-oriented programming language. Smalltalk is considered as the first truly object-oriented programming language.

Object means a real word entity such as pen, chair, table etc. Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies the software development and maintenance by providing some concepts:

Object
Class
Inheritance
Polymorphism
Abstraction
Encapsulation

Abstraction:
Abstraction is the process of identifying the key aspects of an entity and ignoring the rest.
Only those aspects are selected that are important to the current problem scenario.
Example : Abstraction of a person object
Enumerate attributes of a “person object” that need to be created for developing a database
useful for social survey
useful for health care industry
useful for payroll system


Encapsulation:
Encapsulation is a mechanism used to hide the data, internal structure, and implementation details of an object.
All interaction with the object is through a public interface of operations.
The user knows only about the interface; any changes to the implementation does not affect the user.


Inheritance:
Classification helps in handling complexity.
Inheritance is the process by which one object can acquire the properties of another object.
Broad category is formed and then sub-categories are formed. 
“is – a” a kind of hierarchy.

Polymorphism:
The ability of different types of objects to respond to the same message in different ways is called polymorphism.
Polymorphism helps to :
Design extensible software; as new objects can be added to the design without rewriting existing procedures.


Containment:
One object may contain another as a part of its attribute
Document contains sentences which contain words.
Computer system has a hard disk, processor, RAM, mouse, monitor, etc.
Containment need not be physical
E.g. Computer system has a warranty.

Containment VS Inheritance
Containment is used: 
When the features of an existing class are wanted inside a new class, but not its interface.
Computer system has a hard disk.
Car has an engine, chassis, steering wheel.

Inheritance is used:
When it is necessary that the new type has to be the same type as the base class.
Computer system is an electronic device.
Car is a vehicle.


Class:
A template for creating similar objects.
Maps real world entities into classes through data members and member functions.
A user defined type.
An object is an instance of a class.
By writing a class and creating objects of that class, one can map two concepts of object model, abstraction and encapsulation, into software domain.

Template for the creation of similar objects.
A class in C++ is an encapsulation of data members and member functions that manipulate the data.
If semicolon is missing, compiler throws an error 
syntax error : missing ';' before 'PCH creation point’  Error executing cl.exe

Class Component:
A class declaration consists of following components
Access specifiers: restrict access of class members
        private
        protected 
        public
Data members
Member functions
Constructors
Destructors 

Access Specifiers:
public - members are accessible from outside the class
private - members cannot be accessed (or viewed) from outside the class
protected - members cannot be accessed from outside the class, however, they can be accessed in inherited classes.

DataMembers And Members Functions:
Data members are the data variables and member functions are the functions used to manipulate these variables and together these data members and member functions defines the properties and behavior of the objects in a Class.


Constructor:
Special member function of the class with same name as its class name.
Used to initialize attributes of an object
Implicitly called when objects are created.
Without any input parameter is no-argument constructor.
Rules for implementing constructor:
No return type for constructor. Not even void.
Multiple constructors can be written - different number, types and order of parameters.
Must have same name as that of the class.

Following are the types of member functions of a class:
Mutator - Changes contents of instance members
Accessor  -  Accesses instance members
Facilitator -  Helps to view the values of attributes of object
Helper - A private function, accessed from public member functions of same class to help in their implementation



this keyword:
this is a keyword in C++.
this always holds a reference of an object which invokes the member function.
this points to an individual object.
It is a hidden parameter that is passed to every class member function.

Static Variables:
Some characteristics or behaviors belong to the class rather than a specific instance
interestRate, CalculateInterest method for a SavingsAccount class
count variable in Employee to automatically generate employee id
Such data members are static for all instances
Change in static variable value affects all instances
Also known as class variable.
Application
.To keep track how many objects created 
Data to be shared by all objects is stored in static data members.
Only a single copy exists.
Class scope and lifetime is for entire program.
How can they be accessed?

Static Data Members
Class variable
Data to be shared by all objects is stored in static data members.
Only single copy exists.
Scope: entire class and lifetime: entire program.

Static Member Functions:
Can access static data members only.
Invoked using class name as:
Class_Name::Static_Function();
this pointer is never passed to a static member function.

Destructor:
Destructor is a special member function of the class that is invoked implicitly to release the resources held by the object.
Characteristics:
Has same name as that of class.
Does not have a return type or parameters.
Cannot be overloaded. Therefore a class can have only one destructor.
Implicitly called whenever an object ceases to exist.
Syntax:
~Date( ); 


Function Overloading:
Using functions with same name but different signatures in the same program is called function overloading.
Function overloading is a feature of object oriented programming where two or more functions can have the same name but different parameters.
When a function name is overloaded with different jobs it is called Function Overloading.
In Function Overloading “Function” name should be the same and the arguments should be different.







